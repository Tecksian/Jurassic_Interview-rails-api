== README
=Version 0, or 'open alpha'....
Jurassic Interview open-alpha! Dinosaurs? YES! Cages? YES! Overcrowded cages, dinos in unpowered cages, dinos eating each other? Um, well, yeah. But your participation in this open alpha is crucial to knowing what we need to include in the release-day patch!

= INITIAL NOTES
For simplicity's sake, I'm not implementing two elements that I typically would:

1) a custom api namespace: Normally I'd do this so that api paths went like /api/dinosaurs/etc..., to preserve the ability to make standard view-based pages accessible for a user interface. It also helps with versioning, which brings us to:

2) versioning. Especially with apis, you'd want to make sure you have different modules, namespaces, etc for your versioning your controllers. However, in the simple model case like this interview, it seems excessive.

= Developing thoughts

* On testing
We are unusually, but deliberately, including only the barest testing for the base models.
This is not reflective of my design philosophy -- which is *almost* that thorough testing helps me understand the app as much as it helps reliability for users.
However, given the time limit, the simplicty of these models, and the fact that the project description specified only tests for the business logic, we skimp on the basics.

In fact, I admire and often employ the development approach of writing the tests first. Sure, they all fail, but it helps with so many things -- not the least of which is scope creep.
Sad Panda.

* On documentation
I prefer to document as I go along. Typically I revise often, but in this case a 'stream of consciousness' style README might help give insight into my development mindset/approach/etc.

* On general approach
We intend to implement most of the business logic at the model level. More on this to come, but there are advantages to letting the Ruby framework do the heavy lifting for us..

* On shuffling and testing
We like it! Shuffling isn't randomizing, but that's good because it helps get more complete coverage. It can cause debugging to be more problematic, but this is avoidable via the use of specific random seeds.

* On completion time
Please note the huge time difference between batches of github commits. Sticking to the 5 hour limit, just didn't do it in one sitting.

* On releases
Why do two releases for such a simple project? To illustrate my general approach of basic-working-tested->release_basic->advanced_stuff, testing, etc-> more useful releases